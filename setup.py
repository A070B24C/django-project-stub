from __future__ import unicode_literals
from __future__ import print_function
import shutil

from os.path import dirname, join, abspath
import os
import stat


# ##############
# #
#  VARIABLES  #
#             #
###############

__author__ = 'pahaz'
_root = abspath(dirname(__file__))

GIT_IGNORE_FILE = b"""# auto generated by pahaz/django-project-stub
.idea
*.py[cod]

__data__*
_project_*/settings/local_settings.py
"""

README_FILE = b"""# PROJECT DOCS #
This project generated by https://github.com/pahaz/django-project-stub

# CONTRIBUTORS #

# CHANGELOG #

"""


###############
#             #
#  HELPERS    #
#             #
###############

def _get_random_string(length=32,
                       allowed_chars='abcdefghijklmnopqrstuvwxyz'
                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
                                     '0123456789'):
    import random

    return ''.join([random.choice(allowed_chars) for _ in range(length)])


def _on_rm_error(func, path, exc_info):
    # path contains the path of the file that couldn't be removed
    # let's just assume that it's read-only and unlink it.
    os.chmod(path, stat.S_IWRITE)
    os.unlink(path)


def rm_file(*paths):
    path = join(*paths)
    f_path = join(_root, path)
    if os.path.exists(f_path):
        os.remove(f_path)


###############
#             #
#    MAIN     #
#             #
###############

if __name__ == "__main__":
    print("INITIALIZING PROJECT")

    print("GENERATE PRODUCTION SETTINGS `SECRET_KEY`")
    _secret = _get_random_string()
    _path = join(_root, "_project_", "settings", "production_settings.py")
    production_settings_file = open(_path, 'a')
    production_settings_file.write('\nSECRET_KEY = "{0}"\n'.format(_secret))
    production_settings_file.close()

    print("CLEANING STUB")
    rm_file('test.py')

    print("RECREATE `.GITIGNORE` FILE")
    _path = join(_root, ".gitignore")
    git_ignore_file = open(_path, 'wb')
    git_ignore_file.write(GIT_IGNORE_FILE)
    git_ignore_file.close()

    print("RECREATE `README.md` FILE")
    _path = join(_root, "README.md")
    git_ignore_file = open(_path, 'wb')
    git_ignore_file.write(README_FILE)
    git_ignore_file.close()

    print("INIT DATA DIRS (__data__, tmp, media, collect_static)")
    from _project_.stub_settings import PATH_TO_PROJECT_MEDIA_DIR, \
        PATH_TO_PROJECT_TMP_DIR, PATH_TO_PROJECT_COLLECT_STATIC_DIR, \
        PATH_TO_PROJECT_DATA_DIR

    if not os.path.exists(PATH_TO_PROJECT_DATA_DIR):
        os.mkdir(PATH_TO_PROJECT_DATA_DIR)
    if not os.path.exists(PATH_TO_PROJECT_MEDIA_DIR):
        os.mkdir(PATH_TO_PROJECT_MEDIA_DIR)
    if not os.path.exists(PATH_TO_PROJECT_TMP_DIR):
        os.mkdir(PATH_TO_PROJECT_TMP_DIR)
    if not os.path.exists(PATH_TO_PROJECT_COLLECT_STATIC_DIR):
        os.mkdir(PATH_TO_PROJECT_COLLECT_STATIC_DIR)

    print("INIT NEW GIT REPOSITORY")
    shutil.rmtree(join(_root, '.git'), onerror=_on_rm_error)
    os.system("git init")
    os.system("git add *")
    os.system('git commit -am "Init form pahaz/django-project-stub"')

    print("REMOVE SELF")
    os.remove(__file__)

    print("""INITED.

    NOW WE CAN USE:
     * python helpers/mkvirtualenv.py
""")
